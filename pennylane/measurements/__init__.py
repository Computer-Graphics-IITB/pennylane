# Copyright 2018-2021 Xanadu Quantum Technologies Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
This module contains all the measurements supported by PennyLane.

Description
-----------

Measurements
~~~~~~~~~~~~
The :class:`MeasurementProcess` class serves as a base class for measurements, and is inherited
from the :class:`SampleMeasurement`, :class:`StateMeasurement` and :class:`MeasurementTransform`
classes. These classes are subclassed to implement measurements in PennyLane.

* Each :class:`SampleMeasurement` subclass represents a sample-based measurement, which contains a
  :func:`SampleMeasurement.process_samples` method that processes the sequence of samples generated
  by the device. See the :class:`CountsMP` class for an example.

* Each :class:`StateMeasurement` subclass represents a state-based measurement, which contains a
  :func:`StateMeasurement.process_state` method that processes the quantum state generated by the
  device. See the :class:`StateMP` class for an example.

* Each :class:`MeasurementTransform` subclass represents a measurement process that requires
  the application of a batch transform, which converts the given quantum script into a batch of
  quantum scripts and executes them using the device. The main difference between a
  ``MeasurementTransform`` and a :func:`~pennylane.batch_transform` is that a batch transform is
  tracked by the gradient transform, while a ``MeasurementTransform`` process isn't.
  See the :class:`ClassicalShadowMP` class for an example.

.. note::
    A measurement process can inherit from both `SampleMeasurement` and `StateMeasurement` classes,
    defining the needed logic to process either samples or the quantum state. See the
    :class:`VarianceMP` for an example.

Differentiation
^^^^^^^^^^^^^^^
In general, a ``MeasurementProcess` is differentiable with respect to a parameter if the domain of
that parameter is continuous. When using the analytic method of differentiation, it must satisfy an
additional constraint: the output of the measurement process must be a real scalar value.
"""
from .classical_shadow import ClassicalShadowMP, ShadowExpvalMP, classical_shadow, shadow_expval
from .counts import CountsMP, counts
from .expval import ExpectationMP, expval
from .measurements import (
    AllCounts,
    Counts,
    Expectation,
    MeasurementProcess,
    MeasurementShapeError,
    MeasurementTransform,
    MidMeasure,
    MutualInfo,
    ObservableReturnTypes,
    Probability,
    Sample,
    SampleMeasurement,
    Shadow,
    ShadowExpval,
    State,
    StateMeasurement,
    Variance,
    VnEntropy,
)
from .mid_measure import MeasurementValue, MeasurementValueError, MidMeasureMP, measure
from .mutual_info import MutualInfoMP, mutual_info
from .probs import ProbabilityMP, probs
from .sample import SampleMP, sample
from .state import StateMP, density_matrix, state
from .var import VarianceMP, var
from .vn_entropy import VnEntropyMP, vn_entropy
